{"name":"Cqrs-server","tagline":"An opinionated CQRS/ES implementation using Onyx, Datomic, DynamoDB, Kafka and Zookeeper.","body":"# cqrs-server\r\n\r\nAn opinionated CQRS/ES implementation using Onyx, Datomic, DynamoDB, Kafka and Zookeeper.\r\n\r\n## Usage\r\n\r\nA quick guide to get started :\r\n\r\n### Install dynamodb local\r\n\r\nGet dynamodb local from: http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Tools.DynamoDBLocal.html\r\n\r\nAnd then run:\r\n```\r\njava -Djava.library.path=./DynamoDBLocal_lib -jar DynamoDBLocal.jar\r\n```\r\n\r\n### Kafka & Zookeeper\r\n\r\nDownload and extract Kafka: http://kafka.apache.org/downloads.html\r\n\r\nRun both these (probably in separate terminals)\r\n```\r\nbin/zookeeper-server-start.sh config/zookeeper.properties\r\nbin/kafka-server-start.sh config/server.properties\r\n```\r\n\r\nThen clone this repo and fire it up!\r\n\r\n```\r\nlein repl\r\n\r\n=> (start)\r\n\"Setup complete\"\r\n=> (send-command :user/register {:name \"Bob\" :age 31})\r\nnil\r\n=> (d/q '[:find [?e ...] :where [?e :user/name]] (d/db (d/connect datomic-uri)))\r\n[17592186045422]\r\n=> (map #(d/touch (d/entity (d/db (d/connect datomic-uri)) %)) *1)\r\n({:base/uuid #uuid \"54d8fc2e-6c1f-4fb6-93f9-bef9536a9f7d\", :user/age 31, :user/name \"Bob\", :db/id 17592186045422})\r\n```\r\n\r\nNow we have a user in the system, let's fill out his profile a bit:\r\n\r\n```\r\n=> (send-command :user/update-email {:uuid #uuid \"54d8fc2e-6c1f-4fb6-93f9-bef9536a9f7d\" :email \"bob@example.com\"})\r\n=> (send-command :user/disabled {:uuid #uuid \"54d8fc2e-6c1f-4fb6-93f9-bef9536a9f7d\"})\r\n=> (map #(d/touch (d/entity (d/db (d/connect datomic-uri)) %)) (d/q '[:find [?e ...] :where [?e :user/name]] (d/db (d/connect datomic-uri))))\r\n({:base/uuid #uuid \"54d90a89-0880-4f30-bb34-42f29ceb1095\", :user/age 31, :user/email \"bob@example.com\", :user/name \"Bob\", :user/status :user.status/disabled, :db/id 17592186045422})\r\n```\r\n\r\nWe can also send some pageviews and see how it updates the viewcount on the user (a possibly useful aggregate):\r\n\r\n```\r\n=> (send-command :user/pageview {:uuid #uuid \"54d90a89-0880-4f30-bb34-42f29ceb1095\" :url \"http://www.example.com\" :render-time 230})\r\n=> (send-command :user/pageview {:uuid #uuid \"54d90a89-0880-4f30-bb34-42f29ceb1095\" :url \"http://www.example.com\" :render-time 212})\r\n=> (send-command :user/pageview {:uuid #uuid \"54d90a89-0880-4f30-bb34-42f29ceb1095\" :url \"http://www.example.com\" :render-time 182})\r\n=> (map #(d/touch (d/entity (d/db (d/connect datomic-uri)) %)) (d/q '[:find [?e ...] :where [?e :user/name]] (d/db (d/connect datomic-uri))))\r\n({:base/uuid #uuid \"54d90a89-0880-4f30-bb34-42f29ceb1095\", :user/age 31, :user/email \"bob@example.com\", :user/name \"Bob\", :user/status :user.status/disabled, :user/viewcount 3, :db/id 17592186045422})\r\n```\r\n\r\nThen lets have a look at the events:\r\n\r\n```\r\n=> (far/scan dynamodb-cred :events)\r\n[{:date 1423510307575N, :data #<byte[] ...>, :basis-t 1008N, :id \"86439637-8f1e-5170-9b23-824486e3506a\", :type \"user/pageviewed\"} {:date 1423510178427N, :data #<byte[] ...>, :basis-t 1005N, :id \"c67ccc74-c71c-5578-80ad-924c470f052f\", :type \"user/email-updated\"} {:date 1423510316827N, :data #<byte[] ...>, :basis-t 1010N, :id \"08316c9b-3fcd-5a9f-b095-4bf0c1a61a05\", :type \"user/pageviewed\"} {:date 1423510210618N, :data #<byte[] ...>, :basis-t 1007N, :id \"46ac00c9-bd7d-5903-91e0-af56d28ef751\", :type \"user/disabled\"} {:date 1423510153513N, :data #<byte[] ...>, :basis-t 1000N, :id \"be856c9c-0bf8-5ccc-bec1-bfa0f5a7e983\", :type \"user/registered\"} {:date 1423510312463N, :data #<byte[] ...>, :basis-t 1009N, :id \"5c2eb804-1016-5fa3-a868-c01b515f980d\", :type \"user/pageviewed\"}]\r\n```\r\n\r\nThe actual data is fressian encoded so that there's no pain with the transformation of clojure data structures.\r\n\r\nNOTE: If you do actually use this for user aggregates and authentication, remember to at least bcrypt your passwords.\r\nBe very aware that sensitive data is written to multiple places in this system: the kafka queues, the dynamo event source and the datomic aggregate. This is a particularly important consideration for things like credit card details and passwords.\r\n\r\n## License\r\n\r\nCopyright Â© 2015 Yuppiechef Online (Pty) Ltd.\r\n\r\nDistributed under The MIT License (MIT) - See LICENSE.txt\r\n","google":"UA-59536081-1","note":"Don't delete this file! It's used internally to help with page regeneration."}